# Crawford Development Co. Enterprise Risk Management Analysis
# Southeast Bank of Texas Lending Decision

# Load required libraries
suppressPackageStartupMessages(
  suppressWarnings({
    library(ggplot2)
    library(dplyr)
    library(MASS)
    library(gridExtra)
    library(reshape2)
    library(fitdistrplus)
    
  })
)
# Set seed for reproducible results
set.seed(42)

# ==================== DATA SETUP ====================

# Historical data from Exhibit 3 (Office Projects)
historical_data <- data.frame(
  loan_id = 1:32,
  stated_sales = c(66382.35, 60852.39, 65872.30, 64541.97, 73871.30, 52689.86, 63470.57, 55828.80,
                   63972.39, 61999.35, 78151.43, 75928.84, 73195.79, 70009.95, 58471.00, 66242.29,
                   79315.70, 60000.95, 60839.91, 65844.29, 70511.40, 49527.53, 67793.12, 72333.48,
                   55992.65, 75956.10, 61969.04, 55875.70, 74283.09, 85382.88, 69717.37, 56725.72),
  economic_outlook = c(-1, 0, 0, 1, 1, -1, -1, 1, 0, 1, 1, 1, -1, -1, 0, 1, 0, -1, 1, -1, -1, -1, 0, -1, 1, -1, 0, 0, 1, 0, 1, -1),
  realized_sales = c(51302.37, 63452.49, 67932.41, 79689.09, 70408.31, 46006.15, 61575.80, 65413.68,
                     57756.02, 72319.87, 84962.93, 82105.66, 64361.14, 64554.01, 56729.86, 76268.45,
                     84896.93, 43384.19, 68533.78, 51601.49, 62379.33, 36775.17, 70128.14, 61806.21,
                     68218.22, 63401.88, 60720.96, 65842.55, 78509.94, 83909.33, 87853.35, 38732.77)
)

# Current project parameters
loan_amount <- 38375  # thousands
interest_rate_base <- 0.07
loan_term <- 3
crawford_equity <- 8000
total_project_cost <- 46375
bank_cost_of_funds <- 0.06

# Expected sales
office_expected_sales <- 65153.54
residential_expected_sales <- 64100  # Base case


#expected sales -goodness fit
expected_model1<-fitdist(historical_data$stated_sales, "norm")
expected_model2<-fitdist(historical_data$stated_sales, "weibull")
expected_model3<-fitdist(historical_data$stated_sales, "lnorm")
gofstat(list(expected_model1,expected_model2,expected_model3))

historical <- read.csv("SBT Loans Historical Data.csv")
hist(historical$Stated.expected.sales)
install.packages("fitdistrplus")
library(fitdistrplus)
norm_model <- fitdist(historical$Stated.expected.sales, "norm")
binom_model <- fitdist(historical$Stated.expected.sales, "binom")
pois_model <- fitdist(historical$Stated.expected.sales, "pois")
lnorm_model <- fitdist(historical$Stated.expected.sales, "lnorm")
weibull_model <- fitdist(historical$Stated.expected.sales, "weibull")
gofstat(list(norm_model, binom_model, pois_model, lnorm_model, weibull_model))
par(mar = c(4, 4, 2, 1))  
plot(lnorm_model)
lnorm_model$estimate
hist(historical$Realized..actual..sales)
cor(historical$Stated.expected.sales, historical$Realized..actual..sales)
install.packages("dplyr")
library(dplyr)
historical_optimistic <- historical %>%
  filter(Leading.indicator.of.economic.outlook == 1)
historical_neutral <- historical %>%
  filter(Leading.indicator.of.economic.outlook == 0)
historical_pessimistic <- historical %>%
  filter(Leading.indicator.of.economic.outlook == -1)
cor(historical_optimistic$Stated.expected.sales, historical_optimistic$Realized..actual..sales)
cor(historical_neutral$Stated.expected.sales, historical_neutral$Realized..actual..sales)
cor(historical_pessimistic$Stated.expected.sales, historical_pessimistic$Realized..actual..sales)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = historical) +
  geom_point(mapping = aes(x = Stated.expected.sales, y = Realized..actual..sales)) +
  geom_smooth(mapping = aes(x = Stated.expected.sales, y = Realized..actual..sales)) +
  xlab("Expected Sales") + ylab("Actual Sales")
historical.lm <- lm(historical$Realized..actual..sales ~ historical$Stated.expected.sales + factor(historical$Leading.indicator.of.economic.outlook))
summary(historical.lm)

historical <- read.csv("SBT Loans Historical Data.csv")
library(ggplot2)
library(car)
library(dplyr)
library(readr)
library(fitdistrplus)
library(scales) 

#check historical data structure
View(historical)
str(historical)
summary(historical)


#historgram of realized actual sales
ggplot(historical, aes(x = Realized..actual..sales)) +
  geom_histogram(binwidth = 5000, fill = "blue", color = "black") +
  labs(title = "Distribution of Realized Actual Sales",x = "Realized Sales ($)",y = "Number of Projects") +scale_x_continuous(labels = comma) +
  theme_minimal(base_size = 13)

#regression model
model <- lm(Realized..actual..sales ~ Stated.expected.sales + Leading.indicator.of.economic.outlook, data = historical)
summary(model)

#residual plot for regression model
ggplot(data = data.frame(Fitted = fitted(model), Residuals = resid(model)), aes(x = Fitted, y = Residuals)) +
  geom_point(color = "blue", alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(title = "Residual Plot of Regression Model", x = "Fitted Sales($)", y = "Residuals($)") + scale_x_continuous(labels = comma) + scale_y_continuous(labels = comma) +
  theme_minimal(base_size = 13)

#distributions to expected sales
lnorm_model <- fitdist(historical$Stated.expected.sales, "lnorm")
norm_model <- fitdist(historical$Stated.expected.sales, "norm")
weibull_model <- fitdist(historical$Stated.expected.sales, "weibull")
#compare and graphs
gofstat(list(lnorm_model, norm_model, weibull_model))
plot(lnorm_model)
lnorm_model$estimate 

#density plot
ggplot() +
  geom_density(data = historical, aes(x = Stated.expected.sales), fill = "blue", alpha = 0.4) +
  geom_density(data = historical, aes(x = Realized..actual..sales), fill = "red", alpha = 0.4) +
  labs(title = "Density of Expected vs Actual Sales",x = "Sales ($)", y = "Density") + scale_x_continuous(labels = comma) + scale_y_continuous(labels = scientific_format(digits = 2)) +
  theme_minimal(base_size = 13)

#Scatterplot
ggplot(historical, aes(x = Stated.expected.sales, y = Realized..actual..sales, color = factor(Leading.indicator.of.economic.outlook))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Expected vs Actual Sales by Economic Outlook",
       x = "Expected Sales ($)", y = "Actual Sales ($)", color = "Outlook (-1=Pess, 0=Neutral, 1=Pos)") + 
  scale_x_continuous(labels = comma) + scale_y_continuous(labels = comma) +
  theme_minimal(base_size = 13)

#loan acceptance
interest_rate<- data.frame(Rate = c(7, 8, 9, 10, 11),Probability = c(1.00, 0.75, 0.50, 0.25, 0.00))

ggplot(interest_rate, aes(x = factor(Rate), y = Probability)) +
  geom_col(fill = "blue") +
  labs(title = "Loan Acceptance Probability by Interest Rate",
       x = "Interest Rate (%)", y = "Acceptance Probability")+ scale_y_continuous(labels = percent_format(accuracy = 1)) +
  theme_minimal(base_size = 13)

cor(historical$Stated.expected.sales, historical$Realized..actual..sales)
historical_optimistic <- historical %>%
  filter(Leading.indicator.of.economic.outlook == 1)
historical_neutral <- historical %>%
  filter(Leading.indicator.of.economic.outlook == 0)
historical_pessimistic <- historical %>%
  filter(Leading.indicator.of.economic.outlook == -1)
cor(historical_optimistic$Stated.expected.sales, historical_optimistic$Realized..actual..sales)
cor(historical_neutral$Stated.expected.sales, historical_neutral$Realized..actual..sales)
cor(historical_pessimistic$Stated.expected.sales, historical_pessimistic$Realized..actual..sales)
ggplot(data = historical) +
  geom_point(mapping = aes(x = Stated.expected.sales, y = Realized..actual..sales)) +
  geom_smooth(mapping = aes(x = Stated.expected.sales,  y = Realized..actual..sales)) +
  xlab("Expected Sales") + ylab("Actual Sales")
n <- 10000
office_model <- function(n, mean, sd) {
  rlnorm(n, log(mean * (1 + sd^2 / mean^2)^0.5), log(1 + sd^2 / mean^2)^0.5)
}
expected_sim <- office_model(n, mean(historical$Stated.expected.sales), sd(historical$Stated.expected.sales))
prob <- runif(n, 0, 1)
indicators_sim <- ifelse(prob < 12/32, -1, ifelse(prob > 21/32, 1, 0))
df_sim <- data.frame(Stated.expected.sales = expected_sim, Leading.indicator.of.economic.outlook = indicators_sim)
df_sim$Predicted_Actual <- predict(model, df_sim)
hist(df_sim$Predicted_Actual)
mean(df_sim$Predicted_Actual)
mean(df_sim$Predicted_Actual)-qnorm(0.95)*sd(df_sim$Predicted_Actual)/(n^0.5)
mean(df_sim$Predicted_Actual)+qnorm(0.95)*sd(df_sim$Predicted_Actual)/(n^0.5)
min(df_sim$Predicted_Actual)
max(df_sim$Predicted_Actual)
free_cash_flows <- 37875 - 24375 - 9000 - 12500
cumulative_fcf <- 8636.03
loan_inflow <- 38375
df_sim$cFCF <- free_cash_flows + (df_sim$Predicted_Actual - cumulative_fcf - loan_inflow)
hist(df_sim$cFCF)
mean(df_sim$cFCF)
mean(df_sim$cFCF)-qnorm(0.95)*sd(df_sim$cFCF)/sqrt(n)
mean(df_sim$cFCF)+qnorm(0.95)*sd(df_sim$cFCF)/sqrt(n)
min(df_sim$cFCF)
max(df_sim$cFCF)

#NPV
DiscFactor<-(.06)
df_sim$discounted<-37875-24375/(1+DiscFactor/4) -9000/1.06 -12500/(1.06^02)+(df_sim$Predicted_Actual-8636.03-38375)/(1.06^3)
mean(df_sim$discounted)
mean(df_sim$discounted)-qnorm(0.95)*sd(df_sim$discounted)/sqrt(n)
mean(df_sim$discounted)+qnorm(0.95)*sd(df_sim$discounted)/sqrt(n)
min(df_sim$discounted)
max(df_sim$discounted)
par(mfrow = c(1, 1)) 
hist(df_sim$discounted)  

#Residential Sales 

max_sr_res <- 130000  
min_sr_res <- 20000   
ml_sr_res  <- 42300   

rtri<-function(n,min,ml,max){
  qtri<-function(U){
    F<-(ml-min)/(max-min)
    if(U<F) {min+(U*(max-min)*(ml-min))^.5}
    else{max-((1-U)*(max-min)*(max-ml))^.5}
  }
  y<-runif(n)
  sapply(y,qtri)
}
u_sale_r <- rtri(n,min_sr_res, ml_sr_res, max_sr_res)

residential_sales <-data.frame(u_sale_r)

mean(residential_sales$u_sale_r)
mean(residential_sales$u_sale_r)-qnorm(0.95)*sd(residential_sales$u_sale_r)/sqrt(n)
mean(residential_sales$u_sale_r)+qnorm(0.95)*sd(residential_sales$u_sale_r)/sqrt(n)
min(residential_sales$u_sale_r)
max(residential_sales$u_sale_r)

#Histogram of residential sales:
ggplot(data = residential_sales) + 
  geom_histogram(aes(x = u_sale_r, y = ..count../n)) + 
  xlab("Residential Sales (in thousands)") + 
  ylab("Probability") + 
  labs(title = "Expected Residential Project Sales") +
  scale_x_continuous(labels = scales::comma)

# Simulate construction costs 
residential_sales$construction_costs <- rnorm(n=1000,mean=20000,sd=1000)

# Plot expected construction costs as a histrogram:
ggplot(data = residential_sales) + 
  geom_histogram(aes(x = construction_costs, y = ..count../n)) + 
  xlab("Construction Costs (in thousands)") + 
  ylab("Probability") + 
  labs(title = "Expected Construction Costs for Residential Project")

# calculate cumulative FCF assuming an interest rate of 7% and 8.636 M in interest payments
residential_sales$cFCF <- 37875 - 4375 - residential_sales$construction_costs - 9000 - 12500 + (residential_sales$u_sale_r - 8636.03 - 38375.00)

# Plot Cumulative Free Cashflows as a histogram:
ggplot(data = residential_sales) + 
  geom_histogram(aes(x = cFCF, y = ..count../n)) + 
  xlab("Cumulative FCF (in thousands)") + 
  ylab("Probability") + 
  labs(title = "Cumulative FCF for Residential Project")

# 95% Summary Statistics for cumulative FCF:
mean(residential_sales$cFCF)
mean(residential_sales$cFCF)-qnorm(0.95)*sd(residential_sales$cFCF)/sqrt(n)
mean(residential_sales$cFCF)+qnorm(0.95)*sd(residential_sales$cFCF)/sqrt(n)
min(residential_sales$cFCF)
max(residential_sales$cFCF)

# Introduce discounting to the free cashflow model:
residential_sales$discounted <- 37875 - 4375/(1+DiscFactor/4) - 
  residential_sales$construction_costs/(1+DiscFactor/4) - 9000/1.06 - 12500/(1.06^2) + 
  (residential_sales$u_sale_r - 8636.03 - 38375.00)/(1.06^3)

#95% summary statistics:
mean(residential_sales$discounted)
mean(residential_sales$discounted)-qnorm(0.95)*sd(residential_sales$discounted)/sqrt(n)
mean(residential_sales$discounted)+qnorm(0.95)*sd(residential_sales$discounted)/sqrt(n)
max(residential_sales$discounted)
min(residential_sales$discounted)


# Graph histogram of NPV of resi
ggplot(data = residential_sales) + 
  geom_histogram(aes(x = discounted, y = ..count../n)) + 
  xlab("Net Present Value (in thousands)") + 
  ylab("Probability") + 
  labs(title = "Discounted Free Cashflows for Residential Project (NPV)")

#Probability NPV will be negative 
sum(df_sim$discounted<0)/n  
sum(residential_sales$discounted<0)/n  

# Crawford Development Risk Analysis - STREAMLINED VERSION
# Enterprise Risk Management - Essential Analysis Only

# Load required libraries
suppressPackageStartupMessages({
  library(dplyr)
  library(tidyr)
  library(ggplot2)
  library(gridExtra)
})

set.seed(42)

if (!dir.exists("graphs")) dir.create("graphs")

# ==================== CORE CONSTANTS ====================

ECONOMIC_OUTLOOK_LEVELS <- c("Pessimistic", "Neutral", "Optimistic")
LOAN_AMOUNT <- 38375
INTEREST_RATE_BASE <- 0.07
LOAN_TERM <- 3
OFFICE_EXPECTED_SALES <- 65153.54
DEFAULT_SIMULATIONS <- 10000

# ==================== DATA SETUP ====================

convert_outlook <- function(numeric_outlook) {
  case_when(
    numeric_outlook == -1 ~ ECONOMIC_OUTLOOK_LEVELS[1],
    numeric_outlook == 0 ~ ECONOMIC_OUTLOOK_LEVELS[2],
    numeric_outlook == 1 ~ ECONOMIC_OUTLOOK_LEVELS[3]
  )
}

historical_data <- read.csv("crawford/historical_data.csv")

# Calculate probabilities from data
outlook_prob_summary <- historical_data %>%
  count(economic_outlook) %>%
  mutate(probability = n / sum(n))

# Create a named vector for probabilities for easier access
outlook_probabilities <- setNames(
  outlook_prob_summary$probability,
  outlook_prob_summary$economic_outlook
)

# View(outlook_probabilities)

# ==================== CORE FUNCTIONS ====================

calculate_sales_performance <- function(data) {
  data %>%
    group_by(.data$economic_outlook) %>%
    summarise(
      count = n(),
      mean_sales_ratio = mean(.data$sales_ratio),
      sd_sales_ratio = sd(.data$sales_ratio),
      .groups = "drop"
    ) %>%
    arrange(factor(
      .data$economic_outlook,
      levels = ECONOMIC_OUTLOOK_LEVELS
    ))
}

calculate_loan_outcomes <- function(
  realized_sales,
  loan_amount,
  interest_rate,
  loan_term
) {
  total_owed <- loan_amount * (1 + interest_rate)^loan_term

  if (realized_sales >= total_owed) {
    bank_return <- total_owed - loan_amount
    crawford_return <- realized_sales - total_owed
    loan_default <- FALSE
  } else {
    bank_return <- realized_sales - loan_amount
    crawford_return <- 0
    loan_default <- TRUE
  }

  return(list(
    bank_return = bank_return,
    crawford_return = crawford_return,
    loan_default = loan_default
  ))
}

simulate_office_project <- function(
  n_simulations = DEFAULT_SIMULATIONS,
  interest_rate = INTEREST_RATE_BASE,
  perf_stats = performance_stats # Pass pre-calculated stats
) {
  # Ensure outlook_probabilities are in the correct order for sampling
  current_outlook_probs <- c(
    outlook_probabilities["Pessimistic"],
    outlook_probabilities["Neutral"],
    outlook_probabilities["Optimistic"]
  )

  results <- data.frame(
    economic_outlook = sample(
      ECONOMIC_OUTLOOK_LEVELS, n_simulations,
      replace = TRUE,
      prob = current_outlook_probs
    ),
    bank_return = numeric(n_simulations),
    crawford_return = numeric(n_simulations),
    loan_default = logical(n_simulations)
  )

  for (i in seq_along(results$economic_outlook)) {
    outlook <- results$economic_outlook[i]
    stats_row <- perf_stats[perf_stats$economic_outlook == outlook, ]
    sales_ratio <- rnorm(
      1,
      stats_row$mean_sales_ratio,
      stats_row$sd_sales_ratio
    )
    sales_ratio <- pmax(0.3, pmin(1.5, sales_ratio))
    realized_sales <- OFFICE_EXPECTED_SALES * sales_ratio

    loan_outcomes <- calculate_loan_outcomes(
      realized_sales,
      LOAN_AMOUNT,
      interest_rate,
      LOAN_TERM
    )
    results$bank_return[i] <- loan_outcomes$bank_return
    results$crawford_return[i] <- loan_outcomes$crawford_return
    results$loan_default[i] <- loan_outcomes$loan_default
  }

  return(results)
}

simulate_residential_project <- function(
  n_simulations = DEFAULT_SIMULATIONS,
  interest_rate = INTEREST_RATE_BASE
) {
  results <- data.frame(
    bank_return = numeric(n_simulations),
    crawford_return = numeric(n_simulations),
    loan_default = logical(n_simulations)
  )

  for (i in seq_along(results$bank_return)) {
    scenario_rand <- runif(1)

    if (scenario_rand < 0.25) {
      realized_sales <- runif(1, 18000, 22000) # Crisis
    } else if (scenario_rand < 0.65) {
      realized_sales <- rnorm(1, 42300, 5000) # Base
      realized_sales <- pmax(35000, pmin(50000, realized_sales))
    } else {
      realized_sales <- runif(1, 120000, 140000) # Boom
    }

    loan_outcomes <- calculate_loan_outcomes(
      realized_sales,
      LOAN_AMOUNT,
      interest_rate,
      LOAN_TERM
    )
    results$bank_return[i] <- loan_outcomes$bank_return
    results$crawford_return[i] <- loan_outcomes$crawford_return
    results$loan_default[i] <- loan_outcomes$loan_default
  }

  return(results)
}

# ==================== MAIN ANALYSIS ====================

# Pre-calculate performance_stats once
performance_stats <- calculate_sales_performance(historical_data)

cat("=== HISTORICAL PERFORMANCE ===\n")
performance_summary <- calculate_sales_performance(historical_data)
print(performance_summary)

cat("\n=== PROJECT SIMULATIONS ===\n")
office_sim <- simulate_office_project(perf_stats = performance_stats)

# Residential doesn't use historical performance stats in the same way
residential_sim <- simulate_residential_project()

office_metrics <- list(
  expected_return = mean(office_sim$bank_return),
  default_prob = mean(office_sim$loan_default),
  crawford_return = mean(office_sim$crawford_return)
)

residential_metrics <- list(
  expected_return = mean(residential_sim$bank_return),
  default_prob = mean(residential_sim$loan_default),
  crawford_return = mean(residential_sim$crawford_return)
)

cat("Office Project:\n")
cat("  Expected Return: $", round(office_metrics$expected_return, 0), "K\n")
cat(
  "  Default Probability:",
  round(office_metrics$default_prob * 100, 1), "%\n"
)

cat("\nResidential Project:\n")
cat(
  "  Expected Return: $",
  round(residential_metrics$expected_return, 0),
  "K\n"
)

cat(
  "  Default Probability:",
  round(residential_metrics$default_prob * 100, 1),
  "%\n"
)

cat("\nCrawford's Choice:",
    ifelse(residential_metrics$crawford_return > office_metrics$crawford_return,
           "Residential",
           "Office"),
    "\n")

# ==================== INTEREST RATE SENSITIVITY ====================

print("\n=== INTEREST RATE OPTIMIZATION ===")
interest_rates <- seq(0.07, 0.11, 0.01)
sensitivity_results <- data.frame(
  rate = interest_rates,
  bank_return = numeric(length(interest_rates)),
  acceptance_prob = numeric(length(interest_rates)),
  expected_profit = numeric(length(interest_rates))
)

for (i in seq_along(interest_rates)) {
  rate <- interest_rates[i]
  office_temp <- simulate_office_project(n_simulations = 5000,
                                         interest_rate = rate,
                                         perf_stats = performance_stats)

  sensitivity_results$bank_return[i] <- mean(office_temp$bank_return)

  rate_premium <- (rate - INTEREST_RATE_BASE) * 100
  sensitivity_results$acceptance_prob[i] <- max(0, 1 - 0.25 * rate_premium)

  sensitivity_results$expected_profit[i] <-
    sensitivity_results$bank_return[i] * sensitivity_results$acceptance_prob[i]
}

optimal_rate_index <- which.max(sensitivity_results$expected_profit)
optimal_rate <- sensitivity_results$rate[optimal_rate_index]

cat("Optimal Interest Rate:", round(optimal_rate * 100, 1), "%\n")
cat("  Expected Bank Return: $",
    round(sensitivity_results$bank_return[optimal_rate_index], 0),
    "K\n")
cat("  Acceptance Probability:",
    round(sensitivity_results$acceptance_prob[optimal_rate_index] * 100, 0),
    "%\n")

###################################################################
#  KEY VISUALIZATIONS
###################################################################

# 1. Historical Performance
p1 <- ggplot(historical_data, aes(x = sales_ratio)) +
  geom_histogram(bins = 12, alpha = 0.7, fill = "#45B7D1") +
  geom_vline(
    xintercept = 1.0,
    linetype = "dashed",
    color = "red",
    linewidth = 1
  ) +
  labs(
    title = "Crawford's Historical Performance",
    x = "Sales Ratio (Realized/Stated)",
    y = "Number of Loans"
  ) +
  theme_minimal()

# 2. Risk Comparison
risk_data <- data.frame(
  project = c("Office", "Residential"),
  expected_return = c(
    office_metrics$expected_return,
    residential_metrics$expected_return
  ),
  default_prob = c(
    office_metrics$default_prob,
    residential_metrics$default_prob
  )
)

p2 <- ggplot(
  risk_data,
  aes(x = default_prob * 100, y = expected_return, color = project)
) + geom_point(size = 6) +
  geom_text(aes(label = project), vjust = -1, size = 4) +
  scale_color_manual(
    values = c(
      "Office" = "#45B7D1",
      "Residential" = "#FF6B6B"
    )
  ) +
  labs(
    title = "Risk-Return Comparison",
    x = "Default Probability (%)",
    y = "Expected Return ($000s)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# 3. Interest Rate Sensitivity
p3 <- ggplot(sensitivity_results, aes(x = rate * 100)) +
  geom_line(
    aes(y = expected_profit, color = "Expected Profit"), linewidth = 1.5
  ) +
  geom_vline(
    xintercept = optimal_rate * 100, linetype = "dashed", linewidth = 1
  ) +
  scale_color_manual(values = c("Expected Profit" = "#2ECC71")) +
  labs(
    title = paste("Optimal Rate:", round(optimal_rate * 100, 1), "%"),
    x = "Interest Rate (%)", y = "Expected Profit ($000s)"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# Save plots
ggsave("graphs/01_historical_performance.png", p1, width = 8, height = 5)
ggsave("graphs/02_risk_comparison.png", p2, width = 8, height = 5)
ggsave("graphs/03_rate_sensitivity.png", p3, width = 8, height = 5)

grid.arrange(p1, p2, p3, ncol = 2)

# ==================== FINAL RECOMMENDATION ====================

cat("\n=== RECOMMENDATION ===\n")
cat("APPROVE loan with following terms:\n")
cat("  - Interest Rate:", round(optimal_rate * 100, 1), "%\n")
cat("  - Project Restriction: Office development only\n")
cat("  - Expected Return: $",
    round(sensitivity_results$bank_return[optimal_rate_index], 0), "K\n")
cat("  - Default Risk:", round(office_metrics$default_prob * 100, 1), "%\n")
